head	1.3;
access;
symbols;
locks; strict;
comment	@// @;


1.3
date	98.02.06.16.26.03;	author tony;	state Exp;
branches;
next	1.2;

1.2
date	98.02.06.15.46.49;	author tony;	state Exp;
branches;
next	1.1;

1.1
date	96.02.16.22.52.30;	author tony;	state Exp;
branches;
next	;


desc
@Status after lab3
@


1.3
log
@Minor update by TL.
@
text
@function pixels = pow2image(inpic, a)

% POW2IMAGE(inpic, threshold) -- Power spectrum as negative power of two
%
% POW2IMAGE performs a transformation in the Fourier domain such 
% that the phase information is preserved, whereas the magnitude 
% is REPLACED BY a power spectrum of the form
%
% |Fourier|^2 \sim 1/(a + |omega|^2)

ftransform = fft2(inpic);

% Generate the power spectrum in centered frequency coordinates
% (note that the factor (pi/umax) corresponds to (2*pi/usize))
[usize vsize] = size(ftransform);
umax = usize/2;
vmax = vsize/2;
[u v] = meshgrid(umax - usize : umax - 1, vmax - vsize : vmax - 1);
pow2spectrum = 1 ./ (a + ((pi * u/umax).^2 + (pi * v/vmax).^2));

% Move the origin of the power spectrum to the lower left corner
pow2spectrum = fftshift(pow2spectrum);

% Replace the power spectrum (NOT a linear operation)
modtransform = pow2spectrum .* exp(i * angle(ftransform));

pixels = real(ifft2(modtransform));
@


1.2
log
@Before update 1998.
@
text
@a2 1
%
d10 10
a19 1
%
d21 2
a22 3
ftransform = fftshift(fft2(inpic));
[xsize ysize] = size(ftransform);
[x y] = meshgrid(-xsize/2 : xsize/2-1, -ysize/2 : ysize/2 - 1);
d24 2
a25 1
modtransform = 1.0 ./ (a + (x .^2 + y .^2)) .* exp(i * angle(ftransform));
d27 1
a27 1
pixels = ifft2(fftshift(modtransform));
@


1.1
log
@Initial revision
@
text
@d19 1
a19 1
pixels = ifft2(fftshift(modtransform));@
